import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import sqlite3
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger=logging.getLogger( __name__ )

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN=""

# –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ (username –∫–∞–Ω–∞–ª–æ–≤ –ë–ï–ó @)
CHANNELS=[
    {"name" : "MellstroyGame(MGM)", "username" : "projectMGM"},
    {"name" : "–°–æ–∑–¥–∞—Ç–µ–ª—å MGM", "username" : "createrMGM"}
]


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db() :
    conn=sqlite3.connect( 'users.db' )
    cursor=conn.cursor()
    cursor.execute( '''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            subscribed BOOLEAN DEFAULT FALSE,
            registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''' )
    conn.commit()
    conn.close()


# –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
async def check_subscription(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool :
    try :
        for channel in CHANNELS :
            try :
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ
                chat_member=await context.bot.get_chat_member(
                    chat_id=f"@{channel['username']}",
                    user_id=user_id
                )

                # –°—Ç–∞—Ç—É—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º–∏
                if chat_member.status in ['left', 'kicked', 'restricted'] :
                    logger.info( f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ @{channel['username']}" )
                    return False

            except Exception as e :
                logger.error( f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–Ω–∞–ª–∞ @{channel['username']}: {e}" )
                return False

        logger.info( f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã" )
        return True

    except Exception as e :
        logger.error( f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}" )
        return False


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None :
    user=update.effective_user
    user_id=user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    conn=sqlite3.connect( 'users.db' )
    cursor=conn.cursor()
    cursor.execute( '''
        INSERT OR REPLACE INTO users (user_id, username, first_name, last_name)
        VALUES (?, ?, ?, ?)
    ''', (user_id, user.username, user.first_name, user.last_name) )
    conn.commit()
    conn.close()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    is_subscribed=await check_subscription( user_id, context )

    if is_subscribed :
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å—Å—ã–ª–∫—É
        await send_welcome_message( update, context )
    else :
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –ø—Ä–æ—Å–∏–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
        await ask_for_subscription( update, context )


# –ö—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def send_welcome_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None :
    user=update.effective_user
    first_name=user.first_name or "–¥—Ä—É–≥"

    welcome_text=f"""
‚ú® *–ù—É —à–æ —Ç—ã –º–æ–π –º–∞–ª–µ–Ω—å–∫–∏–π... –ù–£ –ü–†–ò–í–ï–ï–ï–¢* ‚ú®

*{first_name}*, —Ç—ã –ø–æ–ø–∞–ª –≤ —Å–∞–º—ã–π –∫—Ä—É—Ç–æ–π –∫—Ä–∏–ø—Ç–æ-–ø—Ä–æ–µ–∫—Ç *MellstroyGame*! üöÄ

üéÆ *–ß—Ç–æ —Ç—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?*
–¢—ã —Å–º–æ–∂–µ—à—å –∏–≥—Ä–∞—è –≤ –∏–≥—Ä—É –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫—Ä–∏–ø—Ç–æ-–º–æ–Ω–µ—Ç—ã *MGM*! –î–∞-–¥–∞, –∏–º–µ–Ω–Ω–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –∫–ª–∏–∫–∞—è –∏ –ø–æ–ª—É—á–∞—è –∫–∞–π—Ñ! üí∞

ü™ô *–ß—Ç–æ —Ç–∞–∫–æ–µ MGM?*
*MGM* - —ç—Ç–æ –º–µ–º-–º–æ–Ω–µ—Ç–∞, –ø–æ—Å–≤—è—â–µ–Ω–Ω–∞—è –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–º—É —Å—Ç—Ä–∏–º–µ—Ä—É *–ú–µ–ª–ª—Å—Ç—Ä–æ—é*! 
–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–æ–∫–µ–Ω, —ç—Ç–æ —Ü–µ–ª–∞—è –∫—É–ª—å—Ç—É—Ä–∞! üåü

üìä *–¢–æ–∫–µ–Ω–æ–º–∏–∫–∞:*
‚Ä¢ *–í—Å–µ–≥–æ –º–æ–Ω–µ—Ç:* 1 –¢–†–ò–õ–õ–ò–û–ù MGM ü™ô
‚Ä¢ *40%* - –Ω–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å üíß
‚Ä¢ *30%* - –Ω–∞ —Ä–∞–∑–¥–∞—á—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É üéÅ  
‚Ä¢ *30%* - —Å–æ–∑–¥–∞—Ç–µ–ª—é –ø—Ä–æ–µ–∫—Ç–∞ ‚ö°

üéØ *–ö–∞–∫ –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å?*
–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ–≥—Ä—É–∑–∏—Å—å –≤ –º–∏—Ä MGM! –¢–∞–º —Ç–µ–±—è –∂–¥—É—Ç:
‚Ä¢ –ö–ª–∏–∫–µ—Ä —Å –ú–µ–ª–ª—Å—Ç—Ä–æ–µ–º üñ±Ô∏è
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥–æ–≤ üèÜ
‚Ä¢ –ú–∞–≥–∞–∑–∏–Ω —Å–∫–∏–Ω–æ–≤ üõçÔ∏è
‚Ä¢ –ë–æ–Ω—É—Å—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç üéÅ
‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ! ‚ú®

üéä *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ–º—å—é MGM, {first_name}!* üéä

*P.S.* –ù–µ –∑–∞–±—ã–≤–∞–π –∑–∞—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∑–∞ –±–æ–Ω—É—Å–∞–º–∏! üî•
    """

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∏–≥—Ä–µ
    keyboard=[
        [InlineKeyboardButton( "üéÆ –ù–ê–ß–ê–¢–¨ –ò–ì–†–ê–¢–¨!", url="t.me/mellstroyGM_bot/play" )],
        [InlineKeyboardButton( "üì¢ –ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã", callback_data="channels" )],
        [InlineKeyboardButton( "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data="about" )]
    ]
    reply_markup=InlineKeyboardMarkup( keyboard )

    if hasattr( update, 'message' ) and update.message :
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
    else :
        await update.callback_query.edit_message_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )


# –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
async def ask_for_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None :
    user=update.effective_user
    first_name=user.first_name or "–¥—Ä—É–≥"

    subscription_text=f"""
ü§ù *–ü—Ä–∏–≤–µ—Ç, {first_name}!* 

–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–≥—Ä–µ *MellstroyGame*, –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã!

üì¢ *–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:*
    """

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –∫–∞–Ω–∞–ª–µ
    buttons=[]
    for channel in CHANNELS :
        subscription_text+=f"\n‚Ä¢ [{channel['name']}](https://t.me/{channel['username']})"
        buttons.append( [InlineKeyboardButton(
            f"üì¢ {channel['name']}",
            url=f"https://t.me/{channel['username']}"
        )] )

    subscription_text+="""

‚ö° *–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ü–†–û–í–ï–†–ò–¢–¨ –ü–û–î–ü–ò–°–ö–£¬ª –Ω–∏–∂–µ*

üéÆ *–ß—Ç–æ —Ç–µ–±—è –∂–¥–µ—Ç –≤ –∏–≥—Ä–µ:*
‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–æ–∫ MGM –º–æ–Ω–µ—Ç üí∞
‚Ä¢ –£–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∏–∫–µ—Ä üñ±Ô∏è
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π üèÜ
‚Ä¢ –ú–∞–≥–∞–∑–∏–Ω —Å–∫–∏–Ω–æ–≤ üõçÔ∏è
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã üéÅ
    """

    buttons.append( [InlineKeyboardButton( "‚úÖ –ü–†–û–í–ï–†–ò–¢–¨ –ü–û–î–ü–ò–°–ö–£", callback_data="check_subscription" )] )

    reply_markup=InlineKeyboardMarkup( buttons )

    if hasattr( update, 'message' ) and update.message :
        await update.message.reply_text(
            subscription_text,
            reply_markup=reply_markup,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
    else :
        await update.callback_query.edit_message_text(
            subscription_text,
            reply_markup=reply_markup,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–æ–≤
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None :
    query=update.callback_query
    await query.answer()

    user_id=query.from_user.id

    if query.data == "check_subscription" :
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        is_subscribed=await check_subscription( user_id, context )

        if is_subscribed :
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
            conn=sqlite3.connect( 'users.db' )
            cursor=conn.cursor()
            cursor.execute( 'UPDATE users SET subscribed = TRUE WHERE user_id = ?', (user_id,) )
            conn.commit()
            conn.close()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            await send_welcome_message_from_callback( query, context )
        else :
            await query.edit_message_text(
                "‚ùå *–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!*\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏ –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞.\n\n"
                "*–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:*\n"
                "‚Ä¢ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –í–°–ï –∫–∞–Ω–∞–ª—ã\n"
                "‚Ä¢ –ù–µ –≤—ã—à–ª–∏ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤\n"
                "‚Ä¢ –ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã—à–µ",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup( [[
                    InlineKeyboardButton( "üîÑ –ü–†–û–í–ï–†–ò–¢–¨ –°–ù–û–í–ê", callback_data="check_subscription" )
                ]] )
            )

    elif query.data == "channels" :
        channels_text="üì¢ *–ù–∞—à–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:*\n\n"
        for channel in CHANNELS :
            channels_text+=f"‚Ä¢ [{channel['name']}](https://t.me/{channel['username']})\n"

        channels_text+="\n*–ü–æ–¥–ø–∏—à–∏—Å—å —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–≥—Ä–µ!*"

        await query.edit_message_text(
            channels_text,
            parse_mode='Markdown',
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup( [[
                InlineKeyboardButton( "‚úÖ –ü–†–û–í–ï–†–ò–¢–¨ –ü–û–î–ü–ò–°–ö–£", callback_data="check_subscription" )
            ]] )
        )

    elif query.data == "about" :
        about_text="""
‚ÑπÔ∏è *–û –ø—Ä–æ–µ–∫—Ç–µ MellstroyGame*

üéÆ *MellstroyGame* - —ç—Ç–æ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –∫—Ä–∏–ø—Ç–æ-–∏–≥—Ä–æ–≤–∞—è —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –≤–æ–∫—Ä—É–≥ –º–µ–º-–º–æ–Ω–µ—Ç—ã MGM, –ø–æ—Å–≤—è—â–µ–Ω–Ω–æ–π –∫—É–ª—å—Ç–æ–≤–æ–º—É —Å—Ç—Ä–∏–º–µ—Ä—É –ú–µ–ª–ª—Å—Ç—Ä–æ—é.

ü™ô *MGM Token:*
‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º: 1,000,000,000,000 MGM
‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: 40% –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å, 30% –∫–æ–º—å—é–Ω–∏—Ç–∏, 30% —Å–æ–∑–¥–∞—Ç–µ–ª—å
‚Ä¢ –¶–µ–ª—å: –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ –∫–æ–º—å—é–Ω–∏—Ç–∏ –≤–æ–∫—Ä—É–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ú–µ–ª–ª—Å—Ç—Ä–æ—è

üéØ *–§–∏—á–∏ –∏–≥—Ä—ã:*
‚Ä¢ –£–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∏–∫–µ—Ä –ø–æ—Å–≤–µ—â–µ–Ω–Ω—ã–π –ú–µ–ª–ª—Å—Ç—Ä–æ—é
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥–æ–≤ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
‚Ä¢ –ú–∞–≥–∞–∑–∏–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∫–∏–Ω–æ–≤
‚Ä¢ –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä—ã –∏ –±—É—Å—Ç—ã
‚Ä¢ –ë–æ–Ω—É—Å—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

üöÄ *–ù–∞—à–∞ –º–∏—Å—Å–∏—è:*
–û–±—ä–µ–¥–∏–Ω–∏—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ú–µ–ª–ª—Å—Ç—Ä–æ—è —á–µ—Ä–µ–∑ –∏–≥—Ä–æ–≤—É—é –º–µ—Ö–∞–Ω–∏–∫—É –∏ —Å–æ–∑–¥–∞—Ç—å —Å–∏–ª—å–Ω–æ–µ –∫–æ–º—å—é–Ω–∏—Ç–∏ –≤–æ–∫—Ä—É–≥ —Ç–æ–∫–µ–Ω–∞ MGM!
        """
        await query.edit_message_text(
            about_text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup( [[
                InlineKeyboardButton( "üéÆ –ù–ê–ß–ê–¢–¨ –ò–ì–†–ê–¢–¨", url="t.me/mellstroyGM_bot/play" )
            ]] )
        )


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–∑ callback
async def send_welcome_message_from_callback(query, context: ContextTypes.DEFAULT_TYPE) -> None :
    user=query.from_user
    first_name=user.first_name or "–¥—Ä—É–≥"

    welcome_text=f"""
‚ú® *–ù—É —à–æ —Ç—ã –º–æ–π –º–∞–ª–µ–Ω—å–∫–∏–π... –ù–£ –ü–†–ò–í–ï–ï–ï–¢* ‚ú®

*{first_name}*, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –≤ —Å–µ–º—å–µ MGM! üöÄ

üéÆ *–ß—Ç–æ —Ç—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?*
–¢—ã —Å–º–æ–∂–µ—à—å –∏–≥—Ä–∞—è –≤ –∏–≥—Ä—É –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫—Ä–∏–ø—Ç–æ-–º–æ–Ω–µ—Ç—ã *MGM*! üí∞

ü™ô *–ß—Ç–æ —Ç–∞–∫–æ–µ MGM?*
*MGM* - —ç—Ç–æ –º–µ–º-–º–æ–Ω–µ—Ç–∞, –ø–æ—Å–≤—è—â–µ–Ω–Ω–∞—è –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–º—É —Å—Ç—Ä–∏–º–µ—Ä—É *–ú–µ–ª–ª—Å—Ç—Ä–æ—é*! üåü

üéØ *–ö–∞–∫ –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å?*
–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ–≥—Ä—É–∑–∏—Å—å –≤ –º–∏—Ä MGM!

üéä *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ–º—å—é MGM, {first_name}!* üéä
    """

    keyboard=[
        [InlineKeyboardButton( "üéÆ –ù–ê–ß–ê–¢–¨ –ò–ì–†–ê–¢–¨!", url="t.me/mellstroyGM_bot/play" )],
        [InlineKeyboardButton( "üì¢ –ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã", callback_data="channels" )],
        [InlineKeyboardButton( "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data="about" )]
    ]
    reply_markup=InlineKeyboardMarkup( keyboard )

    await query.edit_message_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode='Markdown',
        disable_web_page_preview=True
    )


# –ö–æ–º–∞–Ω–¥–∞ /stats (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None :
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
    ADMINS=[123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–æ–≤

    if update.effective_user.id not in ADMINS :
        await update.message.reply_text( "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤." )
        return

    conn=sqlite3.connect( 'users.db' )
    cursor=conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    cursor.execute( 'SELECT COUNT(*) FROM users' )
    total_users=cursor.fetchone()[0]

    cursor.execute( 'SELECT COUNT(*) FROM users WHERE subscribed = TRUE' )
    subscribed_users=cursor.fetchone()[0]

    conn.close()

    stats_text=f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{total_users}*
‚úÖ –ü–æ–¥–ø–∏—Å–∞–≤—à–∏—Ö—Å—è: *{subscribed_users}*
‚ùå –ù–µ–ø–æ–¥–ø–∏—Å–∞–≤—à–∏—Ö—Å—è: *{total_users - subscribed_users}*

üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è: *{(subscribed_users / total_users * 100) if total_users > 0 else 0:.1f}%*
    """

    await update.message.reply_text( stats_text, parse_mode='Markdown' )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None :
    logger.error( msg="Exception while handling an update:", exc_info=context.error )


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None :
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    init_db()

    # –°–æ–∑–¥–∞–µ–º Application
    application=Application.builder().token( BOT_TOKEN ).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler( CommandHandler( "start", start ) )
    application.add_handler( CommandHandler( "stats", stats ) )
    application.add_handler( CallbackQueryHandler( button_handler ) )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler( error_handler )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print( "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω..." )
    application.run_polling()


if __name__ == '__main__' :

    main()
